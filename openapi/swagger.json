{
  "swagger": "2.0",
  "info": {
    "title": "Argo",
    "description": "Python client for Argo Workflows",
    "version": "2.5.0-rc10"
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "in": "header",
      "name": "authorization",
      "type": "apiKey"
    }
  },
  "paths": {
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/archivedarchivedworkflows": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The Workflow's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "List archivedworkflow resources.",
        "operationId": "list_namespaced_archivedworkflows",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "name": "fieldSelector",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "labelSelector",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "resourceVersion",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "timeoutSeconds",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "watch",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.WorkflowList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "post": {
        "operationId": "create_namespaced_archivedworkflow",
        "description": "Creates a namespace scoped Workflow",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/archivedarchivedworkflows/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        },
        {
          "name": "name",
          "description": "Unique Workflow name",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "Get Workflow resource by the archivedworkflow name",
        "operationId": "get_namespaced_archivedworkflow",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "delete": {
        "operationId": "delete_namespaced_archivedworkflow",
        "description": "Deletes the specified namespace scoped Workflow.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Delete options to be send along in the body of this request.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "operationId": "patch_namespaced_archivedworkflow",
        "description": "patch the specified namespace scoped Workflow.",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to patch.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "operationId": "replace_namespaced_archivedworkflow",
        "description": "replace the specified namespace scoped Workflow.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to replace.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.archivedworkflow.v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/cronworkflows": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The Workflow's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "List cronworkflow resources.",
        "operationId": "list_namespaced_cronworkflows",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "name": "fieldSelector",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "labelSelector",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "resourceVersion",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "timeoutSeconds",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "watch",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.WorkflowList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "post": {
        "operationId": "create_namespaced_cronworkflow",
        "description": "Creates a namespace scoped Workflow",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/cronworkflows/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        },
        {
          "name": "name",
          "description": "Unique Workflow name",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "Get Workflow resource by the cronworkflow name",
        "operationId": "get_namespaced_cronworkflow",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "delete": {
        "operationId": "delete_namespaced_cronworkflow",
        "description": "Deletes the specified namespace scoped Workflow.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Delete options to be send along in the body of this request.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "operationId": "patch_namespaced_cronworkflow",
        "description": "patch the specified namespace scoped Workflow.",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to patch.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "operationId": "replace_namespaced_cronworkflow",
        "description": "replace the specified namespace scoped Workflow.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to replace.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.argoproj.cronworkflow.v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/workflows": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The Workflow's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "List workflow resources.",
        "operationId": "list_namespaced_workflows",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "name": "fieldSelector",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "labelSelector",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "resourceVersion",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "timeoutSeconds",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "watch",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "post": {
        "operationId": "create_namespaced_workflow",
        "description": "Creates a namespace scoped Workflow",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/workflows/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        },
        {
          "name": "name",
          "description": "Unique Workflow name",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "Get Workflow resource by the workflow name",
        "operationId": "get_namespaced_workflow",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "delete": {
        "operationId": "delete_namespaced_workflow",
        "description": "Deletes the specified namespace scoped Workflow.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Delete options to be send along in the body of this request.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "operationId": "patch_namespaced_workflow",
        "description": "patch the specified namespace scoped Workflow.",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to patch.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "operationId": "replace_namespaced_workflow",
        "description": "replace the specified namespace scoped Workflow.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the Workflow to replace.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.Workflow"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Workflow"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/workflowtemplates": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The WorkflowTemplate's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "List WorkflowTemplate resources.",
        "operationId": "list_namespaced_workflowtemplates",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "parameters": [
          {
            "name": "fieldSelector",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "labelSelector",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "resourceVersion",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "timeoutSeconds",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "watch",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "post": {
        "operationId": "create_namespaced_workflowtemplate",
        "description": "Creates a namespace scoped WorkflowTemplate",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the WorkflowTemplate to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/apis/argoproj.io/v1alpha1/namespaces/{namespace}/workflowtemplates/{name}": {
      "parameters": [
        {
          "name": "namespace",
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "in": "path"
        },
        {
          "name": "name",
          "description": "Unique WorkflowTemplate name",
          "required": true,
          "type": "string",
          "in": "path"
        }
      ],
      "get": {
        "description": "Get WorkflowTemplate resource by its name",
        "operationId": "get_namespaced_workflowtemplate",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "v1alpha1"
        ]
      },
      "delete": {
        "operationId": "delete_namespaced_workflowtemplate",
        "description": "Deletes the specified namespace scoped WorkflowTemplate.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Delete options to be send along in the body of this request.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "uniqueItems": true,
            "type": "integer",
            "in": "query"
          },
          {
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "uniqueItems": true,
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "uniqueItems": true,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "operationId": "patch_namespaced_workflowtemplate",
        "description": "patch the specified namespace scoped WorkflowTemplate.",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the WorkflowTemplate to patch.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "operationId": "replace_namespaced_workflowtemplate",
        "description": "replace the specified namespace scoped WorkflowTemplate.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "v1alpha1"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The JSON schema of the WorkflowTemplate to replace.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "definitions": {
    "v1alpha1.ArchiveStrategy": {
      "description": "ArchiveStrategy describes how to archive files/directory when saving artifacts",
      "properties": {
        "none": {
          "description": "NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.",
          "type": "object"
        },
        "tar": {
          "description": "TarStrategy will tar and gzip the file or directory when saving",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1alpha1.Arguments": {
      "description": "Arguments to a template",
      "properties": {
        "artifacts": {
          "description": "Artifacts is the list of artifacts to pass to the template or workflow",
          "items": {
            "$ref": "#/definitions/v1alpha1.Artifact"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "parameters": {
          "description": "Parameters is the list of parameters to pass to the template or workflow",
          "items": {
            "$ref": "#/definitions/v1alpha1.Parameter"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "v1alpha1.Artifact": {
      "description": "Artifact indicates an artifact to place at a specified path",
      "properties": {
        "archive": {
          "$ref": "#/definitions/v1alpha1.ArchiveStrategy",
          "description": "Archive controls how the artifact will be saved to the artifact repository."
        },
        "archiveLogs": {
          "description": "ArchiveLogs indicates if the container logs should be archived",
          "type": "boolean"
        },
        "artifactory": {
          "$ref": "#/definitions/v1alpha1.ArtifactoryArtifact",
          "description": "Artifactory contains artifactory artifact location details"
        },
        "from": {
          "description": "From allows an artifact to reference an artifact from a previous step",
          "type": "string"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.GitArtifact",
          "description": "Git contains git artifact location details"
        },
        "globalName": {
          "description": "GlobalName exports an output artifact to the global scope, making it available as '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts",
          "type": "string"
        },
        "hdfs": {
          "$ref": "#/definitions/v1alpha1.HDFSArtifact",
          "description": "HDFS contains HDFS artifact location details"
        },
        "http": {
          "$ref": "#/definitions/v1alpha1.HTTPArtifact",
          "description": "HTTP contains HTTP artifact location details"
        },
        "mode": {
          "description": "mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "name of the artifact. must be unique within a template's inputs/outputs.",
          "type": "string"
        },
        "optional": {
          "description": "Make Artifacts optional, if Artifacts doesn't generate or exist",
          "type": "boolean"
        },
        "path": {
          "description": "Path is the container path to the artifact",
          "type": "string"
        },
        "raw": {
          "$ref": "#/definitions/v1alpha1.RawArtifact",
          "description": "Raw contains raw artifact location details"
        },
        "s3": {
          "$ref": "#/definitions/v1alpha1.S3Artifact",
          "description": "S3 contains S3 artifact location details"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.ArtifactLocation": {
      "description": "ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.",
      "properties": {
        "archiveLogs": {
          "description": "ArchiveLogs indicates if the container logs should be archived",
          "type": "boolean"
        },
        "artifactory": {
          "$ref": "#/definitions/v1alpha1.ArtifactoryArtifact",
          "description": "Artifactory contains artifactory artifact location details"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.GitArtifact",
          "description": "Git contains git artifact location details"
        },
        "hdfs": {
          "$ref": "#/definitions/v1alpha1.HDFSArtifact",
          "description": "HDFS contains HDFS artifact location details"
        },
        "http": {
          "$ref": "#/definitions/v1alpha1.HTTPArtifact",
          "description": "HTTP contains HTTP artifact location details"
        },
        "raw": {
          "$ref": "#/definitions/v1alpha1.RawArtifact",
          "description": "Raw contains raw artifact location details"
        },
        "s3": {
          "$ref": "#/definitions/v1alpha1.S3Artifact",
          "description": "S3 contains S3 artifact location details"
        }
      },
      "type": "object"
    },
    "v1alpha1.ArtifactRepositoryRef": {
      "properties": {
        "configMap": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.ArtifactoryArtifact": {
      "description": "ArtifactoryArtifact is the location of an artifactory artifact",
      "properties": {
        "passwordSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "PasswordSecret is the secret selector to the repository password"
        },
        "url": {
          "description": "URL of the artifact",
          "type": "string"
        },
        "usernameSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "UsernameSecret is the secret selector to the repository username"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "v1alpha1.ArtifactoryAuth": {
      "description": "ArtifactoryAuth describes the secret selectors required for authenticating to artifactory",
      "properties": {
        "passwordSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "PasswordSecret is the secret selector to the repository password"
        },
        "usernameSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "UsernameSecret is the secret selector to the repository username"
        }
      },
      "type": "object"
    },
    "v1alpha1.Backoff": {
      "properties": {
        "duration": {
          "type": "string"
        },
        "factor": {
          "format": "int32",
          "type": "integer"
        },
        "maxDuration": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.ContinueOn": {
      "description": "ContinueOn defines if a workflow should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both.",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "failed": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1alpha1.CronWorkflow": {
      "description": "CronWorkflow is the definition of a scheduled workflow resource",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.CronWorkflowSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CronWorkflowStatus"
        }
      },
      "required": [
        "spec",
        "status"
      ],
      "type": "object"
    },
    "v1alpha1.CronWorkflowList": {
      "description": "CronWorkflowList is list of CronWorkflow resources",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.CronWorkflow"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "metadata",
        "items"
      ],
      "type": "object"
    },
    "v1alpha1.CronWorkflowSpec": {
      "properties": {
        "concurrencyPolicy": {
          "description": "ConcurrencyPolicy is the K8s-style concurrency policy that will be used",
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "description": "FailedJobsHistoryLimit is the number of successful jobs to be kept at a time",
          "format": "int32",
          "type": "integer"
        },
        "schedule": {
          "description": "Schedule is a schedule to run the Workflow in Cron format",
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.",
          "format": "int64",
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "description": "SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time",
          "format": "int32",
          "type": "integer"
        },
        "suspend": {
          "description": "Suspend is a flag that will stop new CronWorkflows from running if set to true",
          "type": "boolean"
        },
        "timezone": {
          "description": "Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.",
          "type": "string"
        },
        "workflowSpec": {
          "$ref": "#/definitions/v1alpha1.WorkflowSpec",
          "description": "WorkflowSpec is the spec of the workflow to be run"
        }
      },
      "required": [
        "workflowSpec",
        "schedule"
      ],
      "type": "object"
    },
    "v1alpha1.CronWorkflowStatus": {
      "properties": {
        "active": {
          "description": "Active is a list of active workflows stemming from this CronWorkflow",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array"
        },
        "lastScheduledTime": {
          "description": "LastScheduleTime is the last time the CronWorkflow was scheduled",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DAGTask": {
      "description": "DAGTask represents a node in the graph during DAG execution",
      "properties": {
        "arguments": {
          "$ref": "#/definitions/v1alpha1.Arguments",
          "description": "Arguments are the parameter and artifact arguments to the template"
        },
        "continueOn": {
          "$ref": "#/definitions/v1alpha1.ContinueOn",
          "description": "ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified"
        },
        "dependencies": {
          "description": "Dependencies are name of other targets which this depends on",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Name is the name of the target",
          "type": "string"
        },
        "onExit": {
          "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template.",
          "type": "string"
        },
        "template": {
          "description": "Name of template to execute",
          "type": "string"
        },
        "templateRef": {
          "$ref": "#/definitions/v1alpha1.TemplateRef",
          "description": "TemplateRef is the reference to the template resource to execute."
        },
        "when": {
          "description": "When is an expression in which the task should conditionally execute",
          "type": "string"
        },
        "withItems": {
          "description": "WithItems expands a task into multiple parallel tasks from the items in the list",
          "items": {
            "description": "Item expands a single workflow step into multiple parallel steps The value of Item can be a map, string, bool, or number",
            "format": "item",
            "type": "string"
          },
          "type": "array"
        },
        "withParam": {
          "description": "WithParam expands a task into multiple parallel tasks from the value in the parameter, which is expected to be a JSON list.",
          "type": "string"
        },
        "withSequence": {
          "$ref": "#/definitions/v1alpha1.Sequence",
          "description": "WithSequence expands a task into a numeric sequence"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DAGTemplate": {
      "description": "DAGTemplate is a template subtype for directed acyclic graph templates",
      "properties": {
        "failFast": {
          "description": "This flag is for DAG logic. The DAG logic has a built-in \"fail fast\" feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo/issues/1442",
          "type": "boolean"
        },
        "target": {
          "description": "Target are one or more names of targets to execute in a DAG",
          "type": "string"
        },
        "tasks": {
          "description": "Tasks are a list of DAG tasks",
          "items": {
            "$ref": "#/definitions/v1alpha1.DAGTask"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "tasks"
      ],
      "type": "object"
    },
    "v1alpha1.ExecutorConfig": {
      "description": "ExecutorConfig holds configurations of an executor container.",
      "properties": {
        "serviceAccountName": {
          "description": "ServiceAccountName specifies the service account name of the executor container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.GitArtifact": {
      "description": "GitArtifact is the location of an git artifact",
      "properties": {
        "depth": {
          "description": "Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip",
          "format": "int64",
          "type": "integer"
        },
        "fetch": {
          "description": "Fetch specifies a number of refs that should be fetched before checkout",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "insecureIgnoreHostKey": {
          "description": "InsecureIgnoreHostKey disables SSH strict host key checking during git clone",
          "type": "boolean"
        },
        "passwordSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "PasswordSecret is the secret selector to the repository password"
        },
        "repo": {
          "description": "Repo is the git repository",
          "type": "string"
        },
        "revision": {
          "description": "Revision is the git commit, tag, branch to checkout",
          "type": "string"
        },
        "sshPrivateKeySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "SSHPrivateKeySecret is the secret selector to the repository ssh private key"
        },
        "usernameSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "UsernameSecret is the secret selector to the repository username"
        }
      },
      "required": [
        "repo"
      ],
      "type": "object"
    },
    "v1alpha1.HDFSArtifact": {
      "description": "HDFSArtifact is the location of an HDFS artifact",
      "properties": {
        "addresses": {
          "description": "Addresses is accessible addresses of HDFS name nodes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "force": {
          "description": "Force copies a file forcibly even if it exists (default: false)",
          "type": "boolean"
        },
        "hdfsUser": {
          "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
          "type": "string"
        },
        "krbCCacheSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos."
        },
        "krbConfigConfigMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used."
        },
        "krbKeytabSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos."
        },
        "krbRealm": {
          "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
          "type": "string"
        },
        "krbServicePrincipalName": {
          "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
          "type": "string"
        },
        "krbUsername": {
          "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
          "type": "string"
        },
        "path": {
          "description": "Path is a file path in HDFS",
          "type": "string"
        }
      },
      "required": [
        "addresses",
        "path"
      ],
      "type": "object"
    },
    "v1alpha1.HDFSConfig": {
      "description": "HDFSConfig is configurations for HDFS",
      "properties": {
        "addresses": {
          "description": "Addresses is accessible addresses of HDFS name nodes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hdfsUser": {
          "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
          "type": "string"
        },
        "krbCCacheSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos."
        },
        "krbConfigConfigMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used."
        },
        "krbKeytabSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos."
        },
        "krbRealm": {
          "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
          "type": "string"
        },
        "krbServicePrincipalName": {
          "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
          "type": "string"
        },
        "krbUsername": {
          "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
          "type": "string"
        }
      },
      "required": [
        "addresses"
      ],
      "type": "object"
    },
    "v1alpha1.HDFSKrbConfig": {
      "description": "HDFSKrbConfig is auth configurations for Kerberos",
      "properties": {
        "krbCCacheSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos."
        },
        "krbConfigConfigMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used."
        },
        "krbKeytabSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos."
        },
        "krbRealm": {
          "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
          "type": "string"
        },
        "krbServicePrincipalName": {
          "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
          "type": "string"
        },
        "krbUsername": {
          "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.HTTPArtifact": {
      "description": "HTTPArtifact allows an file served on HTTP to be placed as an input artifact in a container",
      "properties": {
        "url": {
          "description": "URL of the artifact",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "v1alpha1.Inputs": {
      "description": "Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another",
      "properties": {
        "artifacts": {
          "description": "Artifact are a list of artifacts passed as inputs",
          "items": {
            "$ref": "#/definitions/v1alpha1.Artifact"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "parameters": {
          "description": "Parameters are a list of parameters passed as inputs",
          "items": {
            "$ref": "#/definitions/v1alpha1.Parameter"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "v1alpha1.ItemValue": {
      "properties": {
        "BoolVal": {
          "type": "boolean"
        },
        "ListVal": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "MapVal": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "NumVal": {
          "type": "string"
        },
        "StrVal": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Type",
        "NumVal",
        "BoolVal",
        "StrVal",
        "MapVal",
        "ListVal"
      ],
      "type": "object"
    },
    "v1alpha1.Metadata": {
      "description": "Pod metdata",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1alpha1.NodeStatus": {
      "description": "NodeStatus contains status information about an individual node in the workflow",
      "properties": {
        "boundaryID": {
          "description": "BoundaryID indicates the node ID of the associated template root node in which this node belongs to",
          "type": "string"
        },
        "children": {
          "description": "Children is a list of child node IDs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "daemoned": {
          "description": "Daemoned tracks whether or not this node was daemoned and need to be terminated",
          "type": "boolean"
        },
        "displayName": {
          "description": "DisplayName is a human readable representation of the node. Unique within a template boundary",
          "type": "string"
        },
        "finishedAt": {
          "description": "Time at which this node completed",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic",
          "type": "string"
        },
        "inputs": {
          "$ref": "#/definitions/v1alpha1.Inputs",
          "description": "Inputs captures input parameter values and artifact locations supplied to this template invocation"
        },
        "message": {
          "description": "A human readable message indicating details about why the node is in this condition.",
          "type": "string"
        },
        "name": {
          "description": "Name is unique name in the node tree used to generate the node ID",
          "type": "string"
        },
        "outboundNodes": {
          "description": "OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.\n\nIn the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "outputs": {
          "$ref": "#/definitions/v1alpha1.Outputs",
          "description": "Outputs captures output parameter values and artifact locations produced by this template invocation"
        },
        "phase": {
          "description": "Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine.",
          "type": "string"
        },
        "podIP": {
          "description": "PodIP captures the IP of the pod for daemoned steps",
          "type": "string"
        },
        "startedAt": {
          "description": "Time at which this node started",
          "format": "date-time",
          "type": "string"
        },
        "storedTemplateID": {
          "description": "StoredTemplateID is the ID of stored template. DEPRECATED: This value is not used anymore.",
          "type": "string"
        },
        "templateName": {
          "description": "TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)",
          "type": "string"
        },
        "templateRef": {
          "$ref": "#/definitions/v1alpha1.TemplateRef",
          "description": "TemplateRef is the reference to the template resource which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)"
        },
        "templateScope": {
          "description": "TemplateScope is the template scope in which the template of this node was retrieved.",
          "type": "string"
        },
        "type": {
          "description": "Type indicates type of node",
          "type": "string"
        },
        "workflowTemplateName": {
          "description": "WorkflowTemplateName is the WorkflowTemplate resource name on which the resolved template of this node is retrieved. DEPRECATED: This value is not used anymore.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "displayName",
        "type"
      ],
      "type": "object"
    },
    "v1alpha1.Outputs": {
      "description": "Outputs hold parameters, artifacts, and results from a step",
      "properties": {
        "artifacts": {
          "description": "Artifacts holds the list of output artifacts produced by a step",
          "items": {
            "$ref": "#/definitions/v1alpha1.Artifact"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "parameters": {
          "description": "Parameters holds the list of output parameters produced by a step",
          "items": {
            "$ref": "#/definitions/v1alpha1.Parameter"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "result": {
          "description": "Result holds the result (stdout) of a script template",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.ParallelSteps": {
      "properties": {
        "Steps": {
          "items": {
            "$ref": "#/definitions/v1alpha1.WorkflowStep"
          },
          "type": "array"
        }
      },
      "required": [
        "Steps"
      ],
      "type": "object"
    },
    "v1alpha1.Parameter": {
      "description": "Parameter indicate a passed string parameter to a service template with an optional default value",
      "properties": {
        "default": {
          "description": "Default is the default value to use for an input parameter if a value was not supplied",
          "type": "string"
        },
        "globalName": {
          "description": "GlobalName exports an output parameter to the global scope, making it available as '{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters",
          "type": "string"
        },
        "name": {
          "description": "Name is the parameter name",
          "type": "string"
        },
        "value": {
          "description": "Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/v1alpha1.ValueFrom",
          "description": "ValueFrom is the source for the output parameter's value"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.PodGC": {
      "description": "PodGC describes how to delete completed pods as they complete",
      "properties": {
        "strategy": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.RawArtifact": {
      "description": "RawArtifact allows raw string content to be placed as an artifact in a container",
      "properties": {
        "data": {
          "description": "Data is the string contents of the artifact",
          "type": "string"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "v1alpha1.ResourceTemplate": {
      "description": "ResourceTemplate is a template subtype to manipulate kubernetes resources",
      "properties": {
        "action": {
          "description": "Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch",
          "type": "string"
        },
        "failureCondition": {
          "description": "FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed",
          "type": "string"
        },
        "manifest": {
          "description": "Manifest contains the kubernetes manifest",
          "type": "string"
        },
        "mergeStrategy": {
          "description": "MergeStrategy is the strategy used to merge a patch. It defaults to \"strategic\" Must be one of: strategic, merge, json",
          "type": "string"
        },
        "setOwnerReference": {
          "description": "SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.",
          "type": "boolean"
        },
        "successCondition": {
          "description": "SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step",
          "type": "string"
        }
      },
      "required": [
        "action",
        "manifest"
      ],
      "type": "object"
    },
    "v1alpha1.RetryStrategy": {
      "description": "RetryStrategy provides controls on how to retry a workflow step",
      "properties": {
        "backoff": {
          "$ref": "#/definitions/v1alpha1.Backoff",
          "description": "Backoff is a backoff strategy"
        },
        "limit": {
          "description": "Limit is the maximum number of attempts when retrying a container",
          "format": "int32",
          "type": "integer"
        },
        "retryPolicy": {
          "description": "RetryPolicy is a policy of NodePhase statuses that will be retried",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.S3Artifact": {
      "description": "S3Artifact is the location of an S3 artifact",
      "properties": {
        "accessKeySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AccessKeySecret is the secret selector to the bucket's access key"
        },
        "bucket": {
          "description": "Bucket is the name of the bucket",
          "type": "string"
        },
        "endpoint": {
          "description": "Endpoint is the hostname of the bucket endpoint",
          "type": "string"
        },
        "insecure": {
          "description": "Insecure will connect to the service with TLS",
          "type": "boolean"
        },
        "key": {
          "description": "Key is the key in the bucket where the artifact resides",
          "type": "string"
        },
        "region": {
          "description": "Region contains the optional bucket region",
          "type": "string"
        },
        "roleARN": {
          "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
          "type": "string"
        },
        "secretKeySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "SecretKeySecret is the secret selector to the bucket's secret key"
        }
      },
      "required": [
        "endpoint",
        "bucket",
        "accessKeySecret",
        "secretKeySecret",
        "key"
      ],
      "type": "object"
    },
    "v1alpha1.S3Bucket": {
      "description": "S3Bucket contains the access information required for interfacing with an S3 bucket",
      "properties": {
        "accessKeySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AccessKeySecret is the secret selector to the bucket's access key"
        },
        "bucket": {
          "description": "Bucket is the name of the bucket",
          "type": "string"
        },
        "endpoint": {
          "description": "Endpoint is the hostname of the bucket endpoint",
          "type": "string"
        },
        "insecure": {
          "description": "Insecure will connect to the service with TLS",
          "type": "boolean"
        },
        "region": {
          "description": "Region contains the optional bucket region",
          "type": "string"
        },
        "roleARN": {
          "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
          "type": "string"
        },
        "secretKeySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "SecretKeySecret is the secret selector to the bucket's secret key"
        }
      },
      "required": [
        "endpoint",
        "bucket",
        "accessKeySecret",
        "secretKeySecret"
      ],
      "type": "object"
    },
    "v1alpha1.ScriptTemplate": {
      "description": "ScriptTemplate is a template subtype to enable scripting through code steps",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "source": {
          "description": "Source contains the source code of the script to execute",
          "type": "string"
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "source"
      ],
      "type": "object"
    },
    "v1alpha1.Sequence": {
      "description": "Sequence expands a workflow step into numeric range",
      "properties": {
        "count": {
          "description": "Count is number of elements in the sequence (default: 0). Not to be used with end",
          "type": "string"
        },
        "end": {
          "description": "Number at which to end the sequence (default: 0). Not to be used with Count",
          "type": "string"
        },
        "format": {
          "description": "Format is a printf format string to format the value in the sequence",
          "type": "string"
        },
        "start": {
          "description": "Number at which to start the sequence (default: 0)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.SuspendTemplate": {
      "description": "SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time",
      "properties": {
        "duration": {
          "description": "Duration is the seconds to wait before automatically resuming a template",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.TTLStrategy": {
      "description": "TTLStrategy is the strategy for the time to live depending on if the workflow succeded or failed",
      "properties": {
        "secondsAfterCompletion": {
          "format": "int32",
          "type": "integer"
        },
        "secondsAfterFailure": {
          "format": "int32",
          "type": "integer"
        },
        "secondsAfterSuccess": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1alpha1.Template": {
      "description": "Template is a reusable and composable unit of execution in a workflow",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds relative to the StartTime that the pod may be active on a node before the system actively tries to terminate the pod; value must be positive integer This field is only applicable to container and script templates.",
          "format": "int64",
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "Affinity sets the pod's scheduling constraints Overrides the affinity set at the workflow level (if any)"
        },
        "archiveLocation": {
          "$ref": "#/definitions/v1alpha1.ArtifactLocation",
          "description": "Location in which all files related to the step will be stored (logs, artifacts, etc...). Can be overridden by individual items in Outputs. If omitted, will use the default artifact repository location configured in the controller, appended with the <workflowname>/<nodename> in the key."
        },
        "arguments": {
          "$ref": "#/definitions/v1alpha1.Arguments",
          "description": "Arguments hold arguments to the template."
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.",
          "type": "boolean"
        },
        "container": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Container",
          "description": "Container is the main container image to run in the pod"
        },
        "daemon": {
          "description": "Deamon will allow a workflow to proceed to the next step so long as the container reaches readiness",
          "type": "boolean"
        },
        "dag": {
          "$ref": "#/definitions/v1alpha1.DAGTemplate",
          "description": "DAG template subtype which runs a DAG"
        },
        "executor": {
          "$ref": "#/definitions/v1alpha1.ExecutorConfig",
          "description": "Executor holds configurations of the executor container."
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod spec",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "InitContainers is a list of containers which run before the main container.",
          "items": {
            "$ref": "#/definitions/v1alpha1.UserContainer"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "inputs": {
          "$ref": "#/definitions/v1alpha1.Inputs",
          "description": "Inputs describe what inputs parameters and artifacts are supplied to this template"
        },
        "metadata": {
          "$ref": "#/definitions/v1alpha1.Metadata",
          "description": "Metdata sets the pods's metadata, i.e. annotations and labels"
        },
        "name": {
          "description": "Name is the name of the template",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.",
          "type": "object"
        },
        "outputs": {
          "$ref": "#/definitions/v1alpha1.Outputs",
          "description": "Outputs describe the parameters and artifacts that this template produces"
        },
        "parallelism": {
          "description": "Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.",
          "format": "int64",
          "type": "integer"
        },
        "podSpecPatch": {
          "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).",
          "type": "string"
        },
        "priority": {
          "description": "Priority to apply to workflow pods.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "PriorityClassName to apply to workflow pods.",
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1alpha1.ResourceTemplate",
          "description": "Resource template subtype which can run k8s resources"
        },
        "retryStrategy": {
          "$ref": "#/definitions/v1alpha1.RetryStrategy",
          "description": "RetryStrategy describes how to retry a template when it fails"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "script": {
          "$ref": "#/definitions/v1alpha1.ScriptTemplate",
          "description": "Script runs a portion of code against an interpreter"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccountName": {
          "description": "ServiceAccountName to apply to workflow pods",
          "type": "string"
        },
        "sidecars": {
          "description": "Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes",
          "items": {
            "$ref": "#/definitions/v1alpha1.UserContainer"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "steps": {
          "description": "Steps define a series of sequential/parallel workflow steps",
          "items": {
            "$ref": "#/definitions/v1alpha1.ParallelSteps"
          },
          "type": "array"
        },
        "suspend": {
          "$ref": "#/definitions/v1alpha1.SuspendTemplate",
          "description": "Suspend template subtype which can suspend a workflow when reaching the step"
        },
        "template": {
          "description": "Template is the name of the template which is used as the base of this template.",
          "type": "string"
        },
        "templateRef": {
          "$ref": "#/definitions/v1alpha1.TemplateRef",
          "description": "TemplateRef is the reference to the template resource which is used as the base of this template."
        },
        "tolerations": {
          "description": "Tolerations to apply to workflow pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted by containers in a template.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.TemplateRef": {
      "description": "TemplateRef is a reference of template resource.",
      "properties": {
        "name": {
          "description": "Name is the resource name of the template.",
          "type": "string"
        },
        "runtimeResolution": {
          "description": "RuntimeResolution skips validation at creation time. By enabling this option, you can create the referred workflow template before the actual runtime.",
          "type": "boolean"
        },
        "template": {
          "description": "Template is the name of referred template in the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.UserContainer": {
      "description": "UserContainer is a container specified by a user.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "mirrorVolumeMounts": {
          "description": "MirrorVolumeMounts will mount the same volumes specified in the main container to the container (including artifacts), at the same mountPaths. This enables dind daemon to partially see the same filesystem as the main container in order to use features such as docker volume binding",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.ValueFrom": {
      "description": "ValueFrom describes a location in which to obtain the value to a parameter",
      "properties": {
        "jqFilter": {
          "description": "JQFilter expression against the resource object in resource templates",
          "type": "string"
        },
        "jsonPath": {
          "description": "JSONPath of a resource to retrieve an output parameter value from in resource templates",
          "type": "string"
        },
        "parameter": {
          "description": "Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. '{{steps.mystep.outputs.myparam}}')",
          "type": "string"
        },
        "path": {
          "description": "Path in the container to retrieve an output parameter value from in container templates",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.Workflow": {
      "description": "Workflow is the definition of a workflow resource",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.WorkflowSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.WorkflowStatus"
        }
      },
      "required": [
        "metadata",
        "spec",
        "status"
      ],
      "type": "object"
    },
    "v1alpha1.WorkflowList": {
      "description": "WorkflowList is list of Workflow resources",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.Workflow"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "metadata",
        "items"
      ],
      "type": "object"
    },
    "v1alpha1.WorkflowSpec": {
      "description": "WorkflowSpec is the specification of a Workflow.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the workflow. A value of zero is used to terminate a Running workflow",
          "format": "int64",
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "Affinity sets the scheduling constraints for all pods in the workflow. Can be overridden by an affinity specified in the template"
        },
        "arguments": {
          "$ref": "#/definitions/v1alpha1.Arguments",
          "description": "Arguments contain the parameters and artifacts sent to the workflow entrypoint Parameters are referencable globally using the 'workflow' variable prefix. e.g. {{workflow.parameters.myparam}}"
        },
        "artifactRepositoryRef": {
          "$ref": "#/definitions/v1alpha1.ArtifactRepositoryRef",
          "description": "ArtifactRepositoryRef specifies the configMap name and key containing the artifact repository config."
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.",
          "type": "boolean"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy."
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "entrypoint": {
          "description": "Entrypoint is a template reference to the starting point of the workflow",
          "type": "string"
        },
        "executor": {
          "$ref": "#/definitions/v1alpha1.ExecutorConfig",
          "description": "Executor holds configurations of executor containers of the workflow."
        },
        "hostAliases": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostNetwork": {
          "description": "Host networking requested for this workflow pod. Default to false.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.",
          "type": "object"
        },
        "onExit": {
          "description": "OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary workflow.",
          "type": "string"
        },
        "parallelism": {
          "description": "Parallelism limits the max total parallel pods that can execute at the same time in a workflow",
          "format": "int64",
          "type": "integer"
        },
        "podGC": {
          "$ref": "#/definitions/v1alpha1.PodGC",
          "description": "PodGC describes the strategy to use when to deleting completed pods"
        },
        "podPriority": {
          "description": "Priority to apply to workflow pods.",
          "format": "int32",
          "type": "integer"
        },
        "podPriorityClassName": {
          "description": "PriorityClassName to apply to workflow pods.",
          "type": "string"
        },
        "podSpecPatch": {
          "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).",
          "type": "string"
        },
        "priority": {
          "description": "Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.",
          "format": "int32",
          "type": "integer"
        },
        "schedulerName": {
          "description": "Set scheduler name for all pods. Will be overridden if container/script template's scheduler name is set. Default scheduler will be used if neither specified.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.",
          "type": "string"
        },
        "suspend": {
          "description": "Suspend will suspend the workflow and prevent execution of any future steps in the workflow",
          "type": "boolean"
        },
        "templates": {
          "description": "Templates is a list of workflow templates used in a workflow",
          "items": {
            "$ref": "#/definitions/v1alpha1.Template"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "tolerations": {
          "description": "Tolerations to apply to workflow pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "ttlSecondsAfterFinished": {
          "description": "TTLSecondsAfterFinished limits the lifetime of a Workflow that has finished execution (Succeeded, Failed, Error). If this field is set, once the Workflow finishes, it will be deleted after ttlSecondsAfterFinished expires. If this field is unset, ttlSecondsAfterFinished will not expire. If this field is set to zero, ttlSecondsAfterFinished expires immediately after the Workflow finishes. DEPRECATED: Use TTLStrategy.SecondsAfterCompletion instead.",
          "format": "int32",
          "type": "integer"
        },
        "ttlStrategy": {
          "$ref": "#/definitions/v1alpha1.TTLStrategy",
          "description": "TTLStrategy limits the lifetime of a Workflow that has finished execution depending on if it Succeeded or Failed. If this struct is set, once the Workflow finishes, it will be deleted after the time to live expires. If this field is unset, the controller config map will hold the default values Update"
        },
        "volumeClaimTemplates": {
          "description": "VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "templates",
        "entrypoint"
      ],
      "type": "object"
    },
    "v1alpha1.WorkflowStatus": {
      "description": "WorkflowStatus contains overall status information about a workflow",
      "properties": {
        "compressedNodes": {
          "description": "Compressed and base64 decoded Nodes map",
          "type": "string"
        },
        "finishedAt": {
          "description": "Time at which this workflow completed",
          "format": "date-time",
          "type": "string"
        },
        "message": {
          "description": "A human readable message indicating details about why the workflow is in this condition.",
          "type": "string"
        },
        "nodes": {
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1.NodeStatus"
          },
          "description": "Nodes is a mapping between a node ID and the node's status.",
          "type": "object"
        },
        "offloadNodeStatusVersion": {
          "description": "Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.",
          "type": "string"
        },
        "outputs": {
          "$ref": "#/definitions/v1alpha1.Outputs",
          "description": "Outputs captures output values and artifact locations produced by the workflow via global outputs"
        },
        "persistentVolumeClaims": {
          "description": "PersistentVolumeClaims tracks all PVCs that were created as part of the workflow. The contents of this list are drained at the end of the workflow.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        },
        "phase": {
          "description": "Phase a simple, high-level summary of where the workflow is in its lifecycle.",
          "type": "string"
        },
        "startedAt": {
          "description": "Time at which this workflow started",
          "format": "date-time",
          "type": "string"
        },
        "storedTemplates": {
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1.Template"
          },
          "description": "StoredTemplates is a mapping between a template ref and the node's status.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1alpha1.WorkflowStep": {
      "description": "WorkflowStep is a reference to a template to execute in a series of step",
      "properties": {
        "arguments": {
          "$ref": "#/definitions/v1alpha1.Arguments",
          "description": "Arguments hold arguments to the template"
        },
        "continueOn": {
          "$ref": "#/definitions/v1alpha1.ContinueOn",
          "description": "ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified"
        },
        "name": {
          "description": "Name of the step",
          "type": "string"
        },
        "onExit": {
          "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template.",
          "type": "string"
        },
        "template": {
          "description": "Template is the name of the template to execute as the step",
          "type": "string"
        },
        "templateRef": {
          "$ref": "#/definitions/v1alpha1.TemplateRef",
          "description": "TemplateRef is the reference to the template resource to execute as the step."
        },
        "when": {
          "description": "When is an expression in which the step should conditionally execute",
          "type": "string"
        },
        "withItems": {
          "description": "WithItems expands a step into multiple parallel steps from the items in the list",
          "items": {
            "description": "Item expands a single workflow step into multiple parallel steps The value of Item can be a map, string, bool, or number",
            "format": "item",
            "type": "string"
          },
          "type": "array"
        },
        "withParam": {
          "description": "WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.",
          "type": "string"
        },
        "withSequence": {
          "$ref": "#/definitions/v1alpha1.Sequence",
          "description": "WithSequence expands a step into a numeric sequence"
        }
      },
      "type": "object"
    },
    "v1alpha1.WorkflowTemplate": {
      "description": "WorkflowTemplate is the definition of a workflow template resource",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.WorkflowTemplateSpec"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "v1alpha1.WorkflowTemplateList": {
      "description": "WorkflowTemplateList is list of WorkflowTemplate resources",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.WorkflowTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "metadata",
        "items"
      ],
      "type": "object"
    },
    "v1alpha1.WorkflowTemplateSpec": {
      "description": "WorkflowTemplateSpec is a spec of WorkflowTemplate.",
      "properties": {
        "arguments": {
          "$ref": "#/definitions/v1alpha1.Arguments",
          "description": "Arguments hold arguments to the template."
        },
        "templates": {
          "description": "Templates is a list of workflow templates.",
          "items": {
            "$ref": "#/definitions/v1alpha1.Template"
          },
          "type": "array"
        }
      },
      "required": [
        "templates"
      ],
      "type": "object"
    }
  }
}
